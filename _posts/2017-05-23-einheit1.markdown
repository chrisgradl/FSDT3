---
layout: default
title: Online Session 1
date: 2017-05-23T08:00:00.000Z
categories: 'main, online'
---

# Online Session 1: Server Side Javascript with Node.js

In this online session you will learn Node.js basics which is mandatory for the forthcoming exercises. We will use Node because you are already familiar with Javascript.

## What is Node.js?

Node is defined as asynchronous event driven JavaScript runtime for network applications. It is built on top of Google Chrome V8\. It is the open source Java Script engine developed by Google. So when you run Javascript Code in Chrome Browser it is executed by V8\. Node is using V8 also to execute and run Javascript. Node is primarily used in server applications to serve webapps and websites. It is used i.e. by Netflix, Uber and other big Internet companies. So usually a Node application is hosted on a server. However in our case we will use Node to build a client application which runs on our local machine.

In the following lessons we will learn some Core concepts of Node:

## Command Line and Terminal

Node is started and stopped with the command line. For this course you need some commands and have a basic understanding how to use it. These commands are:

- UNIX / WINDOWS : the left commands is for Linux and macOS the right one is for Windows
- ls / dir to list directories
- mkdir create a directory
- cd switch to directory
- pwd / cd shows the current location
- node: a command to start and stop node application

In the command line you can move between folders similar to a file explorer. Depending on the location you have access to the files on this path. you can go to the previous Folder with 'cd ..'

### TASK 0: Learning Command Line

- Open the Command Line and check in which location you are
- create a new dir with the name `asen2_task_0` at your Desktop (with the Command Line!!!)
- switch into this directory with your command line
- run following command `node --version` and send me a message with the output

## Check if Node.js is already installed

When you run the Installer Node is installed and also added to your path. This allows us to run Node on the Command Line. Node has no Interface/UI where you can start or stop or load a Node script. Instead you have to write Commands on the Command Line to run Node. Therefore we have to check if Node is installed and accessible on your Command Line.

{% highlight javascript %} node --version {% endhighlight %}

Together with Node also the npm package manager is installed which we will also use.

check if npm is already installed {% highlight javascript %} npm --version {% endhighlight %}

### Install Node.js

Go to the [node website](https://nodejs.org/en/download/) and download and install Node.

## Node and the Command Line

node can be controlled via the command line. To start a node application run following command:

{% highlight javascript %} node /path/to/file.js {% endhighlight %}

For example

{% highlight javascript %} cd /path/to/application node index.js {% endhighlight %}

Your Node code will be executed. This can be a simple "Hello World" output to the console or starting a http server. If you start a long running or endless process you can stop the Node application by hitting `ctrl + c`.

### TASK 1: Hello World in Node.js

For our first Node.js application create a new directory with the name: `asen2_task_1`. Switch to this directory and create a new index.js file. Write a simple output to the console
{% highlight javascript %} console.log("Hello World"); {% endhighlight %}
On the command line switch to the directory and start your node application.
What is happening?

### TASK 2: Hello World via http

Often you want to serve or process data over http with a node application. To do so you have to start a http server in your node application.
Create a new directory with the name: `asen2_task_2`. Switch to this directory and create a new index.js file.To start a http server you have to load the http module and call the `createServer` function.

{% highlight javascript %}

var http = require('http');

//create Server with anonymous function as parameter
http.createServer(function(request, response){
  response.end('Hello World');
  }).listen(8080);

{% endhighlight %}

Start your Node application and open the url: <http://localhost:8080> You should see the Hello World String returned in your Browser.

Compared to the first Hello World this program does not end. Since we started a http server the program keeps running. To stop a running node application hit `ctrl + c` in your Command Line.

## Node is using Modules to load additional components

We already used one module from node.js: the http module. Modules are additional components which can be used in Node.js. We have the core modules which are provided by Node.js and additional modules which can be loaded into our application. We can even write our own modules which we then can use. Think of modules as Javascript libraries such as jquery. You can see a full list of the Node core modules in the official [documentation](https://nodejs.org/dist/latest-v6.x/docs/api/). You can load a module with the require function

{% highlight javascript %}
var varWhereModuleIsSaved = require('module name as string');
{% endhighlight %}

In our Arduino project we will use some 3rd party modules. We will learn how to load modules in the next session.

## Node.js is Event Based

Node is Event Based. This means that you can subscribe to certain events and call a function when the event is fired:

{% highlight javascript %}
object.on('eventAsString', anonfunc);
{% endhighlight %}

We have an object where we want to subscribe to a function. We call the function and have two parameters: A String which tells the object which event we want to subscribe and the function which is called when the action happens. Based on the implementation this function can have several paramters.

We want to rewrite our hello world application to use events

### TASK 3: Hello World with events

{% highlight javascript %}

var http = require('http');

var server = http.createServer();

server.on('request', function(req, resp) {
   console.log("Event: Request was triggered and this function was called"); resp.end("Hello World"); });

server.listen(8080, function(){
  console.log("Event: Listen was triggered");
});

console.log("Server running on port 8080");

{% endhighlight %}

- log an additional evvent when a connection is established. The event is subscribed by `connection`. The Callback function has no arguments.
- Start the server and open the website. In which order do the events get fired?

## Node.js is using the Event Emitter for events

Much of the Node.js core API is built around an idiomatic asynchronous event-driven architecture in which certain kinds of objects (called "emitters") periodically emit named events that cause Function objects ("listeners") to be called. In our example above the http object emits an event each time a peer connects to it. We will use other objects with this functionality in the next lessons. All objects that emit events are instances of the EventEmitter class. These objects expose an eventEmitter.on() function that allows one or more functions to be attached to named events emitted by the object. Typically, event names are camel-cased strings but any valid JavaScript property key can be used.

## Node is asynchronous and Non Blocking:

Javascript is single threaded which makes it inherently synchronous. This means Javascript is executed line by line until the application is finished. Since Node is based in Javascript, it inherits this single threaded synchronous behavior. When you have long running blocking operations such as reading or writing files this would block the application until the operation is over. You usually do not want this behavior in a server environment. Node is handling this problem with an event-driven architecture. When a blocking and time intensive operation is started the application does not wait for it to be finished. Instead it sends an event when the process is finished.

### TASK 4: Reading a file in sync and async

We will read the input of a file in two different ways to show the difference between synchronous and asynchronous.

- Create directory with name `asen2_task_4`
- Copy a text based file of your choice into this directory
- Create a index.js file with following Code:

{% highlight javascript %}

var fs = require('fs');
var contents = fs.readFileSync('DATA', 'utf8');
console.log(contents);
console.log("Data was loaded in Sync");

{% endhighlight javascript %}

- Create an event based version
- look at this
[link](https://nodejs.org/dist/latest-v6.x/docs/api/fs.html#fs_fs_readfile_file_options_callback/) how to load a file asynchronous
- print out the data from the text file in the callback function
- Compare the two versions and the order of the log.
