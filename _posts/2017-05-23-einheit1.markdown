---
layout: default
title: Online Session 1
date: 2018-05-28 09:00:00
categories: 'main'
---

# Online Session 1: Server Side Javascript with Node.js

## Repetition node.js

### TASK 1: Hello World in Node.js

For our first Node.js application create a new directory with the name: `asen2_task_1`. Switch to this directory and create a new index.js file. Write a simple output to the console
{% highlight javascript %} console.log("Hello World"); {% endhighlight %}
On the command line switch to the directory and start your node application.
What is happening?

### TASK 2: Hello World via http

Often you want to serve or process data over http with a node application. To do so you have to start a http server in your node application.
Create a new directory with the name: `asen2_task_2`. Switch to this directory and create a new index.js file.To start a http server you have to load the http module and call the `createServer` function.

{% highlight javascript %}

var http = require('http');

//create Server with anonymous function as parameter
http.createServer(function(request, response){
  response.end('Hello World');
  }).listen(8080);

{% endhighlight %}

Start your Node application and open the url: <http://localhost:8080> You should see the Hello World String returned in your Browser.

Why does this program not finish?

## Node is using Modules to load additional components

We already used one module from node.js: the http module. Modules are additional components which can be used in Node.js. We have the core modules which are provided by Node.js and additional modules which can be loaded into our application. We can even write our own modules which we then can use. Think of modules as Javascript libraries such as jquery. You can see a full list of the Node core modules in the official [documentation](https://nodejs.org/dist/latest-v6.x/docs/api/). You can load a module with the require function

{% highlight javascript %}
var varWhereModuleIsSaved = require('module name as string');
{% endhighlight %}

## Node.js is Event Based

Node is Event Based. This means that you can subscribe to certain events and call a function when the event is fired:

{% highlight javascript %}
object.on('eventAsString', anonfunc);
{% endhighlight %}

We have an object where we want to subscribe to a function. We call the function and have two parameters: A String which tells the object which event we want to subscribe and the function which is called when the action happens. Based on the implementation this function can have several parameters.

We want to rewrite our hello world application to use events

### TASK 3: Hello World with events

{% highlight javascript %}

var http = require('http');

var server = http.createServer();

server.on('request', function(req, resp) {
   console.log("Event: Request was triggered and this function was called"); resp.end("Hello World");
});

server.listen(8080, function(){
  console.log("Event: Listen was triggered");
});

console.log("Server running on port 8080");

{% endhighlight %}

- log an additional event when a connection is established. The event is subscribed by `connection`. The Callback function has no arguments.
- Start the server and open the website. In which order do the events get fired?


## Node is asynchronous and Non Blocking:

Javascript is single threaded which makes it inherently synchronous. This means Javascript is executed line by line until the application is finished. Since Node is based in Javascript, it inherits this single threaded synchronous behavior. When you have long running blocking operations such as reading or writing files this would block the application until the operation is over. You usually do not want this behavior in a server environment. Node is handling this problem with an event-driven architecture. When a blocking and time intensive operation is started the application does not wait for it to be finished. Instead it sends an event when the process is finished.

### TASK 4: Reading a file in sync and async

We will read the input of a file in two different ways to show the difference between synchronous and asynchronous.

- Create directory with name `asen2_task_4`
- Copy a text based file of your choice into this directory
- Create a index.js file with following Code:

{% highlight javascript %}

var fs = require('fs');
var contents = fs.readFileSync('DATA', 'utf8');
console.log(contents);
console.log("Data was loaded in Sync");

{% endhighlight javascript %}

- Create an event based version
- look at this
[link](https://nodejs.org/dist/latest-v6.x/docs/api/fs.html#fs_fs_readfile_file_options_callback/) how to load a file asynchronous
- print out the data from the text file in the callback function
- Compare the two versions and the order of the log.

## Repetition npm

### TASK 5:
- create a new project with npm
- Create a new directory called `asen2_task_5`
- Switch into the dir on the command line and run `npm install express`
- What happened inside the asens2_task_5 folder?

### Local or Global installation

There are two ways to install npm packages: locally or globally. You choose which kind of installation to use based on how you want to use the package. In the previous task we installed the express module locally. So npm created the folder node_modules with the required express js code. This would allow us to use the express module in our node application.

If you want to depend on the package from your own module using something like Node.js require, then you want to install locally, which is npm install's default behavior. On the other hand, if you want to use it as a command line tool, something like a utility tool then you want to install it globally.

## Globally

We install a module globally. By adding the `-g` flag to the command we tell npm to install it globally. This means the installed library is accessible from the command line like npm or node

### TASK 6:

- run the command `npm install -g bebusy`
- then start the tool by running `bebusy` on the command line

## Repetition Express

For our Arduino project we will use the express module. Express is a minimal and flexible Node.js web application framework that provides a robust set of features for web and mobile applications. We will use express mainly for serving static files for our web app. It is similar to the http module.

Routing refers to determining how an application responds to a client request to a particular endpoint, which is a URI (or path) and a specific HTTP request method (GET, POST, and so on).
A route has following structure in express

>`app.METHOD(PATH, HANDLER)`

where:

- app is an instance of express.
- METHOD is an HTTP request method, in lowercase.
- PATH is a path on the server.
- HANDLER is the function executed when the route is matched.

### TASK 8: Hello World with Express and static file

- create a new dir called `asen_task_8`
- switch to the command line and run `npm init`
- install express as local dependency
- create a index.js file
- create a folder public
- create the file app.html in the public folder with hello world as h1 tag and valid html tags
- open the index.js file and add following code

<script src="https://gist.github.com/chrisgradl/1f6bd821a711ec80a46f1802e318f14e.js">
</script>

- add a image of a cat to your public folder
- create an additional route with the url /cat which returns the image
- create the dir js in the public folder
- add a client.js file into this folder
- write something to the console in this javascript file
- load the script into your index.html file and check if the output is visible on the console in the browser

We have created the basic skeleton for our web app with express.

## Repetition Socket.io
Socket.IO enables real-time bidirectional event-based communication. It consists in

- a Node.js server
- a Javascript client library for the browser (or a Node.js client)

Socket.io uses several technologies to create this real-time connection depending which are available for the clients. For example:

- WebSocket
- Flash Socket
- AJAX long-polling

Compared to a http request where a client requests data from a server, the socket.io connection also allows to send data from the server to the client.
We will use socket.io to send sensor values from our node application to a website to visualize the data.

- The client(the website) will establish a socket.io connection to our node application.
- Every time the sensor values are changing the node application will send a message to the website.

### TASK 9: Simple Socket.io example
We want to develop a simple example with socket.io and express

- create a new folder `asen_task_9`
- switch to the folder on the command line
- run `npm init`
- run `npm install express --save`
- run `npm install socket.io --save`
- create a index.js file
- create the directory `public`
- create a `app.html` file in the public dir
- initialize express and return the app.html file  on the base route
- test if your node app is returning your app.html website on the url
- to use express together with socket.io we have to initialize the express module in a different way since we have to pass the http server module to socket.io:

<script src="https://gist.github.com/chrisgradl/b8101e92feb7f998816b2d28fd6f8dd3.js"></script>

we register a listener on the `connection` event of the socket object. In the callback we get the associated socket. With this socket object we can communicate with the connected client.

We test our our socket.io server with a simple javascript client on our app.html site.

- open the app.html file
- load the socket.io library before `</body>`
- since we have the node module on our node server we can load the associated client library directly
{% highlight javascript %}
<script src="http://localhost:3000/socket.io/socket.io.js"></script>
{% endhighlight %}
- we then can create a socket.io client and connect to the server
{% highlight javascript %}
<script>
  var socket = io.connect('http://localhost:3000');
  socket.on('hello', function(data) {
    console.log(data);
    // when we receive a hello message from the server we send back a info message
    socket.emit('info', "BLABALAB");
  });
</script>
{% endhighlight %}
- Open the website in your browser
- control the output on the command line and in your browser.

## TASK 10 / Assignment

extend Task 9:

- send a random number to the website every 10 ms. Use the setInterval Method for it
- make sure to stop the timer when the client disconnects

Feedback:

- Did you learn something new today?
- Do you want more theoretical input?
- Less Coding more input?
- Slides instead or Blog?
- For the Pros: what do you want to learn?

## Pro Task:
Every year some students hand in the assignments in the wrong file information. Help them out by writing a custom node.js script which

- takes the matrikelnumber and the path to the project folder as arguments
- creates a zip file which contains all files of the folder except the node_modules folder  
