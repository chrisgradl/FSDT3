---
layout: default
title:  "Lesson 3: Arduino -> Node"
date:   2018-06-15 08:00:00
categories: main
---

# Sensor Display App

In this lesson we will build a simmple application to receive sensor data from the Arduino and display it on a website.

![FSDT3 Architecture]({{ site.url }}/fsdt3/img/goal.gif)

The main building blocks of our app:
![FSDT3 Architecture]({{ site.url }}/fsdt3/img/fsdt3_architecture.png)

### How to get Data from the Arduino to our Node Appliction and then to our website?

We will use a 3rd party module called serialport to read the sensor data in from the Arduino.

### How to display the data on a website?

We will use the socket.io module to send the data from the node application to the website

## 1. Read in the data from the Arduino

### TASK 1: Get Data from the Arduino:

Depending on your current progress you should already print out sensor values in the serial log in the arduino IDE. If not please deploy following code to your arduino.

<script src="https://gist.github.com/chrisgradl/b2b7ebea853982c814a238cf730e1cff.js"></script>

### TASK 2: Initialize the Sensor Display App

* create the directory sensorvis and switch into it on the command line
* create a new npm project
* add the following dependencies to the project with the --save flag
  * express
  * serialport
  * socketio
* check if all dependencies were added in the package.json file
* create the directory 'public' in the sensorvis directory
* switch into the public dir and create a hmtl file sensordisplay.html  
* Then use express to return this file on your '/' route. Use the code from the last session if you need help.

## Read in the arduino data stream
The Sensor values will be read from the serial port of the USB interface of the arduino board. We will use the library [node-serialport] for it.

{% highlight json %}
{timestamp: 387709, type: "heart rate sensor raw", unit: "raw", value: 500}
{timestamp: 387710, type: "heart rate sensor bpm", unit: "bpm", value: 35}
{timestamp: 387720, type: "heart rate sensor raw", unit: "raw", value: 494}
{timestamp: 387721, type: "heart rate sensor bpm", unit: "bpm", value: 35}
{timestamp: 387730, type: "heart rate sensor raw", unit: "raw", value: 486}
{% endhighlight %}

### TASK 3: List all available devices with the serial port library

We have to find the right port (e.g. USB port) from which we can read in the data from the arduino.

* Load the seriaport module
* list the available devices to read from with the list function

{% highlight javascript %}

var serialport = require('serialport');
serialport.list(function(err, ports) {

  ports.forEach(function(port) {
      console.log(port);
  });
});
{% endhighlight %}

To read in the data from the arduino we need the portname of it. Find the arduino in the listed devices on your terminal and save the portname into a var.

Mac & Linux:
{% highlight javascript %}
var portName = '/dev/cu.usbmodem1421';
{% endhighlight %}

Windows:
{% highlight javascript %}
var portName = 'COM3';
{% endhighlight %}


### TASK 4: Connect to the Serial Port of the arduino:

we create a new serialport connection by passing the `portName` to the serialport library. Additional we also pass 2 option parameters:

* baudrate: defines the modulation rate (transfer rate)
* parser: defines how we will read in the data from the arduino. In our case we define the two delimiters (\r\n):

{% highlight javascript %}
var arduinoPort = new serialport(portName, {
    baudrate: 9600,
    parser: serialport.parsers.readline("\r\n")
});
{% endhighlight %}

Print out the `arduinoPort` variable in your terminal:

### TASK 5: Subscribe to the events of the arduino serial port

The serial port module has several events we want to subscribe to. Register a callback function to following events. Look into the documentation of the library [here](https://github.com/EmergingTechnologyAdvisors/node-serialport#module_serialport--SerialPort+event_error)

* Event: "error"
* Event: "open"
* Event: "data"
* Event: "disconnect"
* Event: "close"

Print out a according message in every callback. Run the script and look into the output of your terminal

### TASK 6: Read in the Sensor data

In the callback `on('data', function(data){})` we receive the sensor values from the arduino. The data is read in as String. To access the single parameters we will parse the String into a Json object. Use the function `Json.parse()` and print out the sensor values on the terminal.   


### TASK 7 Optional: Fix the parse errors
To prevent an error on windows we have to wrap the `Json.parse()` function into a try catch block to catch the error

{% highlight javascript %}
try{
    var obj = JSON.parse(data);
}catch(e){
  console.log(e);
}
{% endhighlight %}  



## 2. Send the sensor data to a website

### TASK 8: Initialize socket.io

We want to send the datapoints to a website. We will use socket.io for the communication. We have to adjust the initialization of express when it is used together with socket.io

{% highlight javascript %}
var express = require('express');
var app = express();
var http = require('http').Server(app);
var socketio = require('socket.io')(http);
http.listen(3000);
{% endhighlight %}  


### TASK 9: Emit sensor values to socket.io clients

To send the sensor values to the client we have to use the function `emit(route, data)`. we start to read in the data from the serialport when a client connects via socket.io.

* register a listener on the `connection` event on the socket.io object.
* register a listener on the serialport to receive the data from the arduino.
* In this callback call the function `emit('route', data)` on the socketio object.

{% highlight javascript %}
socketio.on('connection', function(socket) {
    console.log("WebSocket connected");
    //start to read the data from the arduino and send to connected client
    arduinoPort.on('data', function(data) {
      try{
        var obj = JSON.parse(data);
          socket.emit('data', obj);
      }catch(e){
        console.log(e);
      }

    });
});
{% endhighlight %}


### TASK 10: Receive the data in the browser

* Switch to the sensordisplay.html file.
* At the the end of the body import the socket.io javascript client library
* Add the javascript code to connect to the socket.io server to receive the data points

{% highlight javascript %}
<script>
  var socket = io.connect('http://localhost:3000');
  socket.on('data', function(data) {
    console.log(data);
  });
</script>
{% endhighlight %}


## 3. Display the data on a website

To display the sensor values we will use a simple javascript library called [Smoothie.js].

### TASK 11: Import the smoothie.js library:

* create a folder `lib` inside the public folder
* create a new file `smoothie.js` in this folder
* copy the code from [here](https://raw.githubusercontent.com/joewalnes/smoothie/master/smoothie.js) into this file
* in the sensordisplay.html file import this javascript file
{% highlight html %}
    <script src="/lib/smoothie.js" charset="utf-8"></script>
{% endhighlight %}

### TASK 12: Data Visualization

To display the data we have to create a new smoothie.js objec and asign the datapoints to it when we receive them.

* create a canvas element for our chart in the html file
{% highlight html %}
    <canvas id="mycanvas" width="800" height="200"></canvas>
{% endhighlight %}

* create a new smoothie.js object
{% highlight javascript %}
var smoothie = new SmoothieChart();
smoothie.streamTo(document.getElementById("mycanvas"));

var line1 = new TimeSeries();
smoothie.addTimeSeries(line1);   
{% endhighlight %}

* to draw new elements we have to pass the sensor values to the line1 object.

{% highlight javascript %}
socket.on('data', function(msg) {
    console.log(msg);
    //we only want to visualize the raw sensor value
    line1.append(new Date().getTime(), msg);

});
{% endhighlight %}

### Danger Alert! Mein Arduino geht nicht Was jetzt???
Falls der Arduino aus irgendeinem Grund nicht verfügbar ist oder nicht funktioniert gibt es die Möglichkeit Random Daten von der Node Applikation zum Client zu schicken
Dazu erstelle folgende Funktion:

{% highlight javascript %}
var sensorJson = JSON.parse('{"timestamp": 19123,"type": "heart rate sensor raw","unit": "raw","value": 987}');
function sendRandomData(socket) {
    setInterval(function() {
        sensorJson.value = Math.random();
        socket.emit('data', sensorJson);
    }, 100);
}
{% endhighlight %}

Diese Funktion muss man dann in dem 'connection' Callback aufrufen wenn sich der Client verbindet

### Home Exercise:

Write a simple node application to store the datapoints from the arduino into a csv file.
Use the [FileSystem] to write the datapoints into a csv file with semicolons `;`  as delimiter. The csv-file should have following structure:

|timestamp|  value  |
|:-------:| -------:|
| 2443164 |   15    |
| 2443265 |   212   |
| 2443365 |   333   |

The application should start to write into the file when it receives data. It should stop when 5000 data points are in the file.
Hand in a zipped version of your project with the form `matrikelnummer_hue1_asen2.zip`.

* create a new npm project for the exercise
* you can copy the required parts from this lesson
* make sure to delete the node_modules folder before you hand in your exercise
* the comments below should help you:

<script src="https://gist.github.com/chrisgradl/69a892b5c87b40a6de0b9bdeee419b2c.js"></script>


[node-serialport]: https://github.com/voodootikigod/node-serialport/
[Smoothie.js]: http://smoothiecharts.org/
[Express]: http://expressjs.com/
[Socket.io]: http://socket.io
[Seite]: http://localhost:3000/
[Websocket Anwendung]: http://www.websocket.org/echo.html
[Erklärung zu Module]: http://openmymind.net/2012/2/3/Node-Require-and-Exports/
[Code für die Library]:  https://raw.githubusercontent.com/joewalnes/smoothie/master/smoothie.js
[FileSystem]: https://nodejs.org/api/fs.html#fs_fs_appendfile_file_data_options_callback
